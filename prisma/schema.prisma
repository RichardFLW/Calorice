// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  accounts      Account[]
  sessions      Session[]

  // Relation inverse
  mealEntries   MealEntry[]

  // Champs profil (optionnels)
  age           Int?
  weightKg      Float?    @map("weight_kg")
  heightCm      Float?    @map("height_cm")
  sex           String?
  activityLevel String?   @map("activity_level")
  goal          String?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Food {
  id        String   @id @default(cuid())
  name      String
  brands    String?
  barcode   String?  @unique
  // Infos portions / unités (tout optionnel pour matcher l’API existante)
  servingSize         Float?  @map("serving_size")          // ex: 100
  servingUnit         String? @map("serving_unit")          // ex: "g" | "ml" | "portion"
  caloriesPer100g     Float?  @map("calories_per_100g")
  caloriesPerPortion  Float?  @map("calories_per_portion")
  fatPer100g          Float?  @map("fat_per_100g")
  carbsPer100g        Float?  @map("carbs_per_100g")
  proteinPer100g      Float?  @map("protein_per_100g")
  fatPerPortion       Float?  @map("fat_per_portion")
  carbsPerPortion     Float?  @map("carbs_per_portion")
  proteinPerPortion   Float?  @map("protein_per_portion")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")

  mealEntries MealEntry[]

  @@index([name])
  @@index([brands])
  @@map("foods")
}

model MealEntry {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  foodId    String?  @map("food_id")

  eatenAt   DateTime @default(now()) @map("eaten_at")
  amount    Float?
  unit      String?
  calories  Float?

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  food Food? @relation(fields: [foodId], references: [id], onDelete: Restrict)

  @@index([userId, eatenAt])
  @@map("meal_entries")
}
